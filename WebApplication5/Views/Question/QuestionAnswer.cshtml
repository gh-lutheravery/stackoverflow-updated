@using WebApplication5.ViewModels.QuestionAndAnswer
@using WebApplication5.ViewModels.Shared

@model QuestionAnswerViewModel


@section Head 
{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
}


@{
    // init variables for delete modal id names, used by trigger buttons to open the corresponding modal
    string deleteQuestionModalName = "delete-modal-" + "Question";
    string deleteAnswerModalName = "delete-modal-" + "Answer";
}


<div class="row align-items-start columns">
    <div class="col-7 mr-2 column is-three-quarters">
        <article class="media mt-5 box has-background-white" style="align-items: stretch; ">
            <figure class="media-left" style="padding-top: .5rem;">
                <div class="d-flex flex-column media-rows">
                    <!-- use bootstrap icons for up/down arrows -->
                    <span class="vote">
                        <button  class="button" id="ques-up-vote"><i class="bi bi-arrow-up-circle-fill"></i></button>
                    </span>
                    <span id="ques-vote-count" class="vote-count ml-auto mr-auto"><strong>@Model.Question.VoteCount</strong></span>
                    <span class="vote">
                        <button class="button" id="ques-down-vote"><i class="bi bi-arrow-down-circle-fill"></i></button>
                    </span>
                </div>
            </figure>


            <div class="media-content" >
                <div class="condtent mb-4">
                    <p>
                        <h1 class="title is-2" style="margin-bottom: 0">@Model.Question.Title</h1>
                        <hr style="margin: 1px">
                        <div class="content post-view" id="question-view">@Html.Raw(Model.Question.Content)</div>

                        <div class="d-flex justify-content-around prevent-overflow">
                            @foreach (var tag in Model.Question.Tags)
                            {
                                <span class="badge rounded-pill text-bg-dark tag is-warning">@tag.Title</span>
                            }
                        </div>
                    </p>
                </div>

                <nav class="level is-mobile media">
                    <div class="level-left">
                        @Html.ActionLink(Model.Question.Author.Name, "Details", "Profile", routeValues: new { @id=Model.Question.Author.Id }, 
                            htmlAttributes: new { @class="mr-4 level-item" })

                        <small class="text-muted ml-auto level-item">Created at:  @Model.Question.DateCreated</small>
                    </div>
                    @if (User.Claims.Any(c => c.Value == Model.Question.Author.Id.ToString()))
                    {
                        <div class="level-right">
                            <a class="button is-link mr-2 open-modal-trigger" asp-controller="Question" asp-action="QuestionUpdate" asp-route-id="@Model.Question.Id">Update</a>

                            <button type="button" class="button is-danger open-modal-trigger" data-toggle="modal" data-target="@deleteQuestionModalName">Delete</button>
                            @Html.Partial("~/Views/Shared/_DeleteModal.cshtml", new DeleteModalViewModel()
                                { Action="QuestionDelete", DomainName="Question", Controller="Question", ResourceId=Model.Question.Id } )
                        </div>
                
                    }
                </nav>
            </div>
        </article>

        <h2 class="title is-3">@Model.Answers.Count Answers</h2>

        <ul id="answer-list">
            @foreach (var answer in Model.Answers)
            {
                <li>
                    <article class="answer-container media mt-5 box has-background-white" style="align-items: stretch; ">
                        <figure class="media-left" style="padding-top: .5rem;">
                            <div class="d-flex flex-column media-rows">
                                <!-- use bootstrap icons for up/down arrows -->
                                <span class="vote">
                                    <button class="button" disabled><i class="bi bi-arrow-up-circle-fill"></i></button>
                                </span>
                                <span class="ml-auto mr-auto">@answer.VoteCount</span>
                                <span class="vote">
                                    <button class="button" disabled><i class="bi bi-arrow-down-circle-fill"></i></button>
                                </span>
                            </div>
                        </figure>


                        <div class="media-content">
                            <div class="mb-4">
                                <p>
                                    <div class="content post-view soc-answer">@Html.Raw(answer.Content)</div>
                                </p>
                            </div>

                            <nav class="level is-mobile media">
                                <div class="level-left">
                                    @Html.ActionLink(answer.Author.Name, "Details", "Profile", routeValues: new { @id=answer.Author.Id },
                                        htmlAttributes: new { @class="mr-4 level-item" })

                                    <small class="text-muted ml-auto level-item">Created at:  @answer.DateCreated</small>
                                </div>

                                @if (User.Claims.Any(c => c.Value == answer.Author.Id.ToString()))
                                {
                                    Model.ClientAnswerId = answer.Id;
                                    Model.AnswerUpdateForm.OriginalAnswerContent = answer.Content;

                                    <div class="level-right">
                                        <button type="button" class="button is-link mr-2 open-modal-trigger" data-target="answer-update-modal">Update</button>
                                        @Html.Partial("~/Views/Answer/_AnswerUpdate.cshtml", Model.AnswerUpdateForm)

                                        <button type="button" class="button is-danger open-modal-trigger" data-target="@deleteAnswerModalName">Delete</button>
                                        @Html.Partial("~/Views/Shared/_DeleteModal.cshtml", new DeleteModalViewModel()
                                            { Action="AnswerDelete", DomainName="Answer", Controller="Answer", ResourceId=answer.Id } )
                                    </div>
                                }
                            </nav>
                        </div>
                    </article>
                </li>
            }
        </ul>

        @Html.Partial("~/Views/Answer/_AnswerCreate.cshtml", Model.AnswerCreateForm)
    </div>

    <div class="col-3 column mt-5">
        <span class="mb-2">
            @Html.Partial("~/Views/Shared/_AskQuestion.cshtml")
        </span>
        <h1 class="subtitle is-3 mt-5">Search tags used in this post</h1>
        <div class="list-unstyled media-rows">
            @foreach (var tag in Model.Question.Tags)
            {
                <div class="field">
                    <span class="badge rounded-pill has-background-link text-bg-dark tag is-info is-medium">
                        <a class="has-text-white" asp-controller="Home" asp-action="Search" asp-route-searchQuery="tag:@tag.Title" asp-route-pageNumber="1">@tag.Title</a>
                    </span>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts 
{
    <script>
        // init question rich text
        const questionViewQuill = new Quill('#question-view', {
            modules: { toolbar: false },
            theme: 'snow'
        });
        questionViewQuill.disable();

        // init answer rich text
        const answerList = document.getElementsByClassName('soc-answer');
        for (let answer of answerList) {
            new Quill(answer, {
                modules: { toolbar: false },
                theme: 'snow'
            }).disable();
        }

        // init answer form editor
        var newAnswerQuill = initDefaultQuill('#new-answer-editor');

        function handleNewAnswerSubmit() {
            document.getElementById('quill-new-answer-content').value = JSON.stringify(newAnswerQuill.getContents());

            let cleanedText = slicePostContent(newAnswerQuill.getText());
            document.getElementById('quill-new-answer-truncated-content').value = cleanedText + '...';

            document.getElementById('associated-question-id').value = @Model.Question.Id;
        }
    </script>

    @if (Model.ClientAnswerId != null)
    {
        <script>
            // init answer update editor
            var answerUpdateQuill = initDefaultQuill('#update-answer-editor');

            function handleAnswerUpdateSubmit() {
                document.getElementById('quill-update-answer-content').value = JSON.stringify(answerUpdateQuill.getContents());
                document.getElementById('associated-question-id').value = @Model.Question.Id;
                document.getElementById('original-answer-id').value = @Model.ClientAnswerId;
            }
        </script>
    }

    <script>
        // Functions for voting

        $('#ques-up-vote').click(function () {
            handleQuestionVote($(this), "bg-so", 1);
        });

        $('#ques-down-vote').click(function () {
            handleQuestionVote($(this), "bg-downvote", -1);
        });

        // changes html value and color on voting, and sends request to api
        function handleQuestionVote($element, colorClass, incrementBy) {
            let $voteCountElement = $('#ques-vote-count');
            incrementQuestionVoteCount($voteCountElement, incrementBy);

            $element.toggleClass(colorClass);

            $.ajax({
                url: '@Url.Action("UpdateVote", "Question")',
                method: 'POST',
                data: { id: @Model.Question.Id, incrementBy: incrementBy },
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                error: function () {
                    console.log('Error voting post.');
                }
            });
            
        }

        function incrementQuestionVoteCount($element, incrementBy) {
            const originalVoteCount = @Model.Question.VoteCount;
            let currentVoteCount = Number($element.text());

            if (currentVoteCount + incrementBy > originalVoteCount + 1)
                incrementBy = -1;

            else if (currentVoteCount + incrementBy < originalVoteCount - 1)
                incrementBy = 1;

            $element.text(
                String(currentVoteCount + incrementBy)
            );
        }
    </script>
}


